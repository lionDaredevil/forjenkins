{
	"info": {
		"_postman_id": "98e00fe5-0b24-468f-b2c5-39447fc07615",
		"name": "HW14",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8334097"
	},
	"item": [
		{
			"name": "HW14_3",
			"item": [
				{
					"name": "register a new valid user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"let email = JSON.parse(pm.request.body.raw).email;",
									"pm.collectionVariables.set('email', email);",
									"",
									"let userId = pm.response.json().data.userId;",
									"pm.collectionVariables.set('userId', userId);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"status\": {",
									"            \"type\": \"string\"",
									"        },",
									"    \"data\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"userId\": {",
									"                \"type\": \"integer\"",
									"            },",
									"            \"photoFilename\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"distanceUnits\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"currency\": {",
									"                \"type\": \"string\"",
									"            }",
									"        }",
									"    }",
									"    }",
									"}",
									"",
									"pm.test('Schema is valid', function () {",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John\",\n  \"lastName\": \"Dou\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{userPass}}\",\n  \"repeatPassword\": \"{{userPass}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "update user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let name = JSON.parse(pm.request.body.raw).name;",
									"let lastName = JSON.parse(pm.request.body.raw).lastName;",
									"let dateBirth = JSON.parse(pm.request.body.raw).dateBirth.slice(0,19);",
									"",
									"pm.test(\"Name was updated with proper value verification\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.name).to.eql(name);",
									"});",
									"",
									"pm.test(\"Last name was updated with proper value verification\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.lastName).to.eql(lastName);",
									"});",
									"",
									"pm.test(\"Date of birth was updated with proper value verification\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.dateBirth.slice(0, 19)).to.eql(dateBirth);",
									"});",
									"",
									"pm.test(\"Country was updated with proper value verification\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.country).to.eql('Australia');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function randomDate(start, end) {",
									"  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
									"}",
									"",
									"let dateOfBirthUpdated = randomDate(new Date(1990, 1, 1), new Date())",
									"",
									"pm.collectionVariables.set('dateOfBirthUpdated', dateOfBirthUpdated)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"photo\": \"user-1621352948859.jpg\",\n  \"name\": \"{{$randomUserName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"dateBirth\": \"{{dateOfBirthUpdated}}\",\n  \"country\": \"Australia\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/profile",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "change password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let idTocompare = pm.collectionVariables.get('userId')",
									" console.log(idTocompare)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"password was updated for correct user verification\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.userId).to.eql(pm.collectionVariables.get('userId'));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oldPassword\": \"{{userPass}}\",\n  \"password\": \"{{newUserPass}}\",\n  \"repeatPassword\": \"{{newUserPass}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/password",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(",
									"        {",
									"            \"status\": \"ok\",",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{url}}/auth/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"password was updated for correct user verification\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.userId).to.eql(pm.collectionVariables.get('userId'));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{newUserPass}}\",\n  \"remember\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "add car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.collectionVariables.set('carId', jsonData.data.id);",
									"pm.collectionVariables.set('date', jsonData.data.carCreatedAt)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"carBrandId\": {{carBrandId}},\n  \"carModelId\": {{carModelId}},\n  \"mileage\": 122\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/cars",
							"host": [
								"{{url}}"
							],
							"path": [
								"cars"
							]
						}
					},
					"response": []
				},
				{
					"name": "add expenses",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let newTotalCost = Number(pm.collectionVariables.get('totalCost')) + 10;",
									"pm.collectionVariables.set('totalCost', newTotalCost);",
									"",
									"let newMileage = Number(pm.collectionVariables.get('mileage')) + 1;",
									"pm.collectionVariables.set('mileage', newMileage);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"carId\": {{carId}},\n  \"reportedAt\": \"{{date}}\",\n  \"mileage\": {{mileage}},\n  \"liters\": 11,\n  \"totalCost\": 1,\n  \"forceMileage\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/expenses",
							"host": [
								"{{url}}"
							],
							"path": [
								"expenses"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW14_1_create user validation",
			"item": [
				{
					"name": "Required fields verification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"body\",JSON.stringify(pm.iterationData.get(\"data\")));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request fields error messages verification\", function () {",
									"    var jsonData = pm.response.json(); ",
									"    pm.expect(jsonData.message).to.eql(pm.iterationData.get(\"message\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW14_2_Update user profile - invalid data",
			"item": [
				{
					"name": "Update user's with invalid data profile verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Error messgae is returned verification\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"error\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"body\",JSON.stringify(pm.iterationData.get(\"data\")));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/profile",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Run 'register a new valid user' request before, so session to be stored and user profile to exist (to update it)"
		}
	],
	"variable": [
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "dateOfBirthUpdated",
			"value": ""
		}
	]
}